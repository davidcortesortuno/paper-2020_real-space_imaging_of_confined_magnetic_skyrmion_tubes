# MIF 2.2

set PI [expr {4 * atan(1.)}]
set MU0 [expr {4 * $PI * 1e-7}]

# -----------------------------------------------------------------------------
# FeGe material

set Ms [expr {3.84e5}]
set A  [expr {8.78e-12}]
set D  [expr {1.58e-3}]
Parameter FIELDSWEEP 0
Parameter BZ [expr {0.2}]
Parameter Demag 1

# Zeeman field for the hysteresis process when FIELDSWEEP=1
Parameter BzStart [expr {1.5}]
Parameter BzStop  [expr {-1.5}]
Parameter BzSteps [expr {300}]

Parameter XL [expr {1000e-9}]
Parameter YL [expr {1000e-9}]
Parameter ZL [expr {100e-9}]

Parameter xcell [expr {4e-9}]
Parameter ycell [expr {4e-9}]
Parameter zcell [expr {4e-9}]

Parameter BASENAME "./mixed_phases/m"

# -----------------------------------------------------------------------------

SetOptions [subst {
    basename $BASENAME
    scalar_field_output_format {binary 8}
    scalar_field_output_meshtype rectangular
    vector_field_output_format {binary 8}
    vector_field_output_meshtype rectangular
}]

# -----------------------------------------------------------------------------

# BoxAtlas
Specify Oxs_BoxAtlas:atlas [subst {
  xrange {[expr {-$XL * 0.5}] [expr {$XL * 0.5}]}
  yrange {[expr {-$YL * 0.5}] [expr {$YL * 0.5}]}
  zrange {[expr {-$ZL * 0.5}] [expr {$ZL * 0.5}]}
  name atlas
}]

# RectangularMesh
Specify Oxs_RectangularMesh:mesh [subst {
  cellsize {$xcell $ycell $zcell}
  atlas Oxs_BoxAtlas:atlas
}]

# -----------------------------------------------------------------------------

# UniformExchange
Specify Oxs_UniformExchange [subst {
  A $A
}]

# BulkDMI
Specify Oxs_DMI_T [subst {
  default_D $D
  atlas :atlas
  D {
    atlas atlas $D
  }
}]

# Demag
if {$Demag == 1} {
  Specify Oxs_Demag {}
}

# Zeeman
if {$FIELDSWEEP == 0} {
  Specify Oxs_FixedZeeman:Bfield [subst {
    comment {Field values in Tesla; scale to A/m}
    multiplier [expr {1 / $MU0}]
    field {0.0 0.0 $BZ}
  }]
} else {
  # Field sweep
  Specify Oxs_UZeeman [subst {
      comment {Field values in Tesla; scale to A/m}
      Hrange {
          { 0 0 $BzStart 0 0 $BzStop $BzSteps } 
      }
      multiplier [expr {1 / $MU0}]
  }]
}

# -----------------------------------------------------------------------------

# CGEvolver
Specify Oxs_CGEvolve {}

# MinDriver
Specify Oxs_MinDriver [subst {
  evolver Oxs_CGEvolve
  stopping_mxHxm 0.01
  comment { total_iteration_limit 1 }
  mesh :mesh
  Ms $Ms
  m0 { Oxs_ScriptVectorField {
     atlas :atlas
     script { sk_lattice }
     norm 1.0
     script_args { rawpt }
  }}

}]

Destination table mmArchive
Destination mags mmArchive

Schedule DataTable table Step 500
Schedule Oxs_MinDriver::Magnetization mags Stage 1

# =============================================================================

# Function to sum the elements from a list
proc ladd {l} {::tcl::mathop::+ {*}$l}

# Element-wise product of the elements of two lists
# TCL 8.6:
# proc lprod {l1 l2} {return [lmap x $l1 y $l2 {expr {$x * $y}}]}
# TCL 8.5:
proc lprod {l1 l2} {
    set res {}
    foreach x $l1 y $l2 {
        lappend res [expr {$x * $y}]
    }
    return $res
}

# Dot product of two lists:
proc ldot {l1 l2} {::tcl::mathop::+ {*}[lprod $l1 $l2]}

# Scalar product of a double $p with a list $l
# proc lscprod {p l} {return [lmap x $l {expr {$x * $p}}]}
# TCL 8.5:
proc lscprod {p l} {
    set res {}
    foreach x $l {
        lappend res [expr {$x * $p}]
    }
    return $res
}

proc sk_lattice { x y z } {
    global XL
    global YL
    global ZL
    global PI

    set xrel [expr {$x + 0.5 * $XL}]
    set yrel [expr {$y + 0.5 * $YL}]

    set r [list $x $y $z]

    set L_sk [expr {70e-9}]
    set F [expr {2 * $PI / $L_sk}]

    if {$yrel > (($YL / 3) - ($xrel - $XL))} {
        
        return [list 0.0 0.01 0.99]

    } elseif {$yrel < -($xrel - 2 * $XL / 3)} {

        set HEL_LEN [expr {70e-9}]
        set T [expr {-45 * $PI / 180 }]
        set U_dot_R [expr {cos($T) * $x + sin($T) * $y}]

        set mx [expr {0.0}]
        set my [expr {-sin($PI * $U_dot_R / $HEL_LEN)}]
        set mz [expr {cos($PI * $U_dot_R / $HEL_LEN)}]

        return [list [expr {$mx * cos($T) - $my * sin($T)}] [expr {$mx * sin($T) + $my * cos($T)}] $mz]

    } else {
        set q0 [list [expr {-1.0}] [expr {0.0}] [expr {0.0}]]
        set q0 [lscprod $F $q0]
        set q1 [list [expr {0.5}] [expr {-sqrt(3) * 0.5}] [expr {0.0}]]
        set q1 [lscprod $F $q1]
        set q2 [list [expr {0.5}] [expr {sqrt(3) * 0.5}] [expr {0.0}]]
        set q2 [lscprod $F $q2]

        set e0 [list [expr {0.0}] [expr {1.0}] [expr {0.0}]]
        set e1 [list [expr {-sqrt(3) * 0.5}] [expr {-0.5}] [expr {0.0}]]
        set e2 [list [expr {sqrt(3) * 0.5}] [expr {-0.5}] [expr {0.0}]]

        set ez [list 0.0 0.0 1.0]

        set m_x [expr {[lindex $ez 0] * cos([ldot $q0 $r] + $PI) +
                       [lindex $e0 0] * sin([ldot $q0 $r] + $PI) +
                       [lindex $ez 0] * cos([ldot $q1 $r] + $PI) +
                       [lindex $e1 0] * sin([ldot $q1 $r] + $PI) +
                       [lindex $ez 0] * cos([ldot $q2 $r] + $PI) +
                       [lindex $e2 0] * sin([ldot $q2 $r] + $PI)
                       }]

        set m_y [expr {[lindex $ez 1] * cos([ldot $q0 $r] + $PI) +
                       [lindex $e0 1] * sin([ldot $q0 $r] + $PI) +
                       [lindex $ez 1] * cos([ldot $q1 $r] + $PI) +
                       [lindex $e1 1] * sin([ldot $q1 $r] + $PI) +
                       [lindex $ez 1] * cos([ldot $q2 $r] + $PI) +
                       [lindex $e2 1] * sin([ldot $q2 $r] + $PI)
                       }]

        set m_z [expr {[lindex $ez 2] * cos([ldot $q0 $r] + $PI) +
                       [lindex $e0 2] * sin([ldot $q0 $r] + $PI) +
                       [lindex $ez 2] * cos([ldot $q1 $r] + $PI) +
                       [lindex $e1 2] * sin([ldot $q1 $r] + $PI) +
                       [lindex $ez 2] * cos([ldot $q2 $r] + $PI) +
                       [lindex $e2 2] * sin([ldot $q2 $r] + $PI)
                       }]

        return [list $m_x $m_y $m_z]
    }
}
